#include <iostream>
#include <cstring>
#include <sstream>
#include <string>

#include <openssl/engine.h>
#include <openssl/evp.h>
#include <openssl/err.h>
#include <openssl/pem.h>
#include <openssl/rsa.h>

unsigned char privkey_bin[] = {
    0x22, 0x41, 0x0a, 0x46, 0x65, 0x4e, 0x6d, 0xf4, 0xf7, 0x06, 0x59, 0x93,
    0x53, 0x43, 0x37, 0x3a, 0x63, 0x10, 0x01, 0x30, 0xfd, 0x10, 0xe2, 0x85,
    0x6e, 0x7b, 0xda, 0x6f, 0x83, 0x7d, 0x14, 0x9a, 0x54, 0x71, 0x6c, 0xc4,
    0x10, 0x7b, 0x98, 0xf8, 0x8a, 0x42, 0x58, 0x41, 0xe0, 0xb4, 0x5b, 0x0a,
    0x34, 0x8a, 0xd4, 0x38, 0x14, 0x74, 0x3a, 0x79, 0x28, 0x73, 0x8f, 0x44,
    0xc3, 0x1f, 0xb6, 0x78, 0x69, 0x9e, 0xf1, 0xf6, 0xed, 0x27, 0x58, 0x2b,
    0xfd, 0x71, 0x81, 0x54, 0x72, 0x6b, 0x5d, 0x8e, 0xd2, 0xe4, 0x6d, 0x3b,
    0x1e, 0x0c, 0x96, 0x5b, 0x89, 0x65, 0xfc, 0xc3, 0xc5, 0x2b, 0xf2, 0x09,
    0x84, 0x97, 0xa0, 0x8f, 0x25, 0x77, 0x5e, 0x46, 0x35, 0xd9, 0x48, 0xf6,
    0x64, 0xaa, 0x94, 0xef, 0x15, 0xd3, 0xd3, 0x80, 0xd7, 0xd0, 0x9e, 0x88,
    0x06, 0xdd, 0x5c, 0xca, 0x31, 0x20, 0x05, 0x9c, 0xb1, 0x4f, 0xb9, 0x35,
    0x53, 0xbb, 0xbe, 0xcd, 0xaf, 0xb0, 0x52, 0xfb, 0x05, 0x74, 0x1b, 0x7e,
    0xcd, 0xce, 0x28, 0x55, 0xd2, 0x2f, 0x98, 0xd7, 0x82, 0x15, 0xf8, 0x5b,
    0x9c, 0xab, 0x94, 0x56, 0xb8, 0xc1, 0xfb, 0xe1, 0x60, 0xd6, 0xf2, 0x1c,
    0x2d, 0xb8, 0x30, 0x27, 0x02, 0x1f, 0xb5, 0xff, 0x86, 0x17, 0x7e, 0xcb,
    0x3d, 0xf2, 0xbd, 0x19, 0x29, 0x7f, 0xa8, 0x85, 0x0c, 0x32, 0xb3, 0x28,
    0xf9, 0xba, 0x8b, 0x8b, 0x2a, 0x29, 0x0a, 0xf8, 0x12, 0x6b, 0x21, 0xde,
    0x64, 0x47, 0x5d, 0x91, 0x9c, 0xaf, 0xac, 0xc0, 0x75, 0xc8, 0x23, 0xcf,
    0x79, 0x30, 0x1e, 0xd7, 0x1f, 0xeb, 0xbf, 0x08, 0xe7, 0x83, 0x2d, 0xec,
    0xfd, 0x22, 0x94, 0x61, 0x27, 0x99, 0x16, 0x58, 0x64, 0xd4, 0x05, 0x27,
    0xce, 0xea, 0x47, 0x6f, 0x03, 0x89, 0x11, 0x43, 0x2d, 0xdd, 0xf8, 0xfd,
    0xbb, 0x39, 0xbe, 0x0f, 0x4f, 0x11, 0x7f, 0x0c, 0x1f, 0x06, 0xb7, 0x3d,
    0xcb, 0xc4, 0x59, 0xdb, 0x4a, 0xde, 0xcc, 0x4b, 0x4d, 0x0a, 0xc6, 0x94,
    0x86, 0xc0, 0x9b, 0x06, 0xff, 0x5b, 0xd0, 0xd2, 0x9b, 0x6f, 0x5a, 0xa7,
    0xbf, 0xd4, 0x85, 0x65, 0x00, 0x46, 0x13, 0x4d, 0xfd, 0xae, 0xaa, 0x9a,
    0x38, 0x4e, 0x8f, 0x58, 0xd8, 0xc9, 0x99, 0xdc, 0x79, 0x4f, 0xca, 0xa5,
    0x28, 0x77, 0x7d, 0x59, 0x05, 0x22, 0xab, 0xe1, 0x79, 0x54, 0x27, 0x06,
    0x44, 0x34, 0x74, 0x60, 0x82, 0xaf, 0x2a, 0x5c, 0x14, 0xb8, 0x3e, 0xda,
    0xfb, 0x0e, 0x67, 0x65, 0xfd, 0x04, 0x64, 0xbe, 0x38, 0x4a, 0x25, 0x45,
    0x06, 0x6d, 0x34, 0xbc, 0xc5, 0x16, 0xe0, 0x92, 0xc8, 0xc0, 0xc6, 0xda,
    0xa8, 0xc5, 0xf6, 0xbd, 0xd6, 0xd3, 0x49, 0x88, 0x47, 0x38, 0x91, 0x76,
    0x48, 0xda, 0xc1, 0xb6, 0xf1, 0x20, 0xf4, 0xda, 0x23, 0x47, 0xca, 0x24,
    0xab, 0x96, 0x9e, 0x6f, 0xce, 0xce, 0x0d, 0x75, 0x8f, 0x1f, 0x31, 0x90,
    0x58, 0xf4, 0x3d, 0x09, 0xe7, 0x1d, 0xb0, 0xee, 0xef, 0x7c, 0xcb, 0x4a,
    0xb8, 0x6d, 0x15, 0x8e, 0x30, 0x1d, 0x90, 0x1b, 0x95, 0x8e, 0x3e, 0x29,
    0x16, 0xab, 0xba, 0xbe, 0x35, 0x27, 0xe6, 0x17, 0x32, 0x86, 0x67, 0x8c,
    0x38, 0x73, 0x4f, 0xb0, 0xb8, 0xa2, 0x1b, 0x02, 0x1c, 0xfb, 0xec, 0x40,
    0xf2, 0x1b, 0x1f, 0x1c, 0xf3, 0x92, 0xaf, 0x6d, 0xd9, 0x7a, 0x76, 0xcc,
    0x64, 0x00, 0xd8, 0x76, 0x15, 0xd3, 0xa3, 0xde, 0xe8, 0x82, 0x1b, 0x26,
    0xd0, 0xb5, 0x43, 0x7e, 0x74, 0x67, 0x83, 0x61, 0xb7, 0x4a, 0xc8, 0x2e,
    0xe9, 0x25, 0x99, 0x4d, 0x57, 0x31, 0xb1, 0x72, 0xea, 0x8d, 0xca, 0x11,
    0x16, 0x61, 0xcb, 0x93, 0x4d, 0x10, 0x2d, 0x63, 0x9c, 0x79, 0x80, 0xb6,
    0xce, 0x69, 0x37, 0x35, 0x8a, 0x19, 0x50, 0x18, 0x3f, 0x37, 0x0c, 0x04,
    0xf4, 0x64, 0x37, 0x72, 0xcc, 0x10, 0x69, 0x9b, 0x3b, 0xaf, 0x32, 0x42,
    0x31, 0x90, 0x64, 0xeb, 0x56, 0xdb, 0x01, 0xc9, 0x79, 0x46, 0x73, 0xe0,
    0xba, 0x1a, 0xae, 0xe7, 0xf7, 0x78, 0x16, 0xc5, 0x58, 0x23, 0x77, 0x83,
    0x73, 0x36, 0x8d, 0xe2, 0xc7, 0x4b, 0xbd, 0xe6, 0x68, 0xe4, 0x2c, 0xdf,
    0x14, 0x9a, 0x35, 0x94, 0x33, 0x44, 0xfa, 0xf0, 0xfb, 0x47, 0xf9, 0x71,
    0xc6, 0x77, 0x52, 0xbc, 0xdc, 0x1b, 0xe5, 0xfd, 0xb8, 0x85, 0x71, 0x87,
    0x80, 0xbb, 0x72, 0xdd, 0xd9, 0xdc, 0x2d, 0x9c, 0xed, 0x5f, 0xbc, 0x1b,
    0x71, 0x8a, 0x0d, 0xf3, 0xa8, 0xdb, 0xc0, 0xf1, 0xb9, 0xf6, 0xac, 0x97,
    0xca, 0xa5, 0x9b, 0x8e, 0xd6, 0xe1, 0xbf, 0xa4, 0x4d, 0xb5, 0xf0, 0xca,
    0xc6, 0x3e, 0x4b, 0x88, 0xc0, 0x2f, 0xe1, 0x09, 0xaf, 0x27, 0x8c, 0x7c,
    0xe0, 0x42, 0xd6, 0xdd, 0xc8, 0x80, 0x03, 0x37, 0x4d, 0x6b, 0x8b, 0xea,
    0x30, 0x9b, 0x46, 0xef, 0x2d, 0xd7, 0xa4, 0x16, 0x76, 0xfd, 0xee, 0x4a,
    0x44, 0xad, 0x56, 0xf9, 0x6e, 0x45, 0x9f, 0x92, 0xb1, 0x30, 0x52, 0xe8,
    0xf1, 0x09, 0xf7, 0x85, 0xa3, 0xf9, 0x5d, 0xc7, 0x3d, 0x22, 0x0f, 0x6f,
    0x51, 0x8d, 0xc9, 0x3d, 0xa5, 0x4d, 0x44, 0xf4, 0x7d, 0x18, 0x68, 0x9e,
    0x8f, 0x9f, 0xca, 0xcf, 0x55, 0xb0, 0xd0, 0xfa, 0xdf, 0x76, 0xe5, 0xf7,
    0x1c, 0x9d, 0x00, 0x3b, 0x75, 0x2a, 0x27, 0x87, 0x5f, 0xb1, 0x6d, 0x58,
    0x6f, 0x0d, 0x3f, 0x1b, 0xc5, 0xdd, 0x11, 0x7c, 0x12, 0x30, 0x5a, 0x05,
    0xa5, 0xcf, 0xd7, 0xa4, 0x26, 0x86, 0x15, 0x53, 0xce, 0x7e, 0x3a, 0xc9,
    0xc5, 0x59, 0xcf, 0x3d, 0x6b, 0xd0, 0xf3, 0xe6, 0x27, 0xc0, 0x49, 0x79,
    0xe3, 0x87, 0x83, 0xee, 0xd8, 0xb9, 0xf3, 0x9b, 0xb6, 0x20, 0x7e, 0x20,
    0x33, 0x8a, 0x4c, 0x04, 0xcf, 0xce, 0xd6, 0x5a, 0x73, 0xf5, 0x8c, 0xa4,
    0xcb, 0xf7, 0x28, 0x05, 0x5b, 0x31, 0x31, 0x35, 0xfb, 0x6c, 0x50, 0x1c,
    0x78, 0x7b, 0x33, 0xb2, 0x36, 0x66, 0x5d, 0x5e, 0xe0, 0x11, 0xc7, 0x63,
    0x56, 0x84, 0x91, 0x5b, 0x63, 0x9d, 0x82, 0x9b, 0xb8, 0xa4, 0xfc, 0xa1,
    0xfd, 0xc2, 0xfb, 0x46, 0xb5, 0xe7, 0x45, 0x1d, 0x0f, 0x62, 0xea, 0x69,
    0xdb, 0xf7, 0x5d, 0x2d, 0x0b, 0x53, 0x71, 0xe4, 0x0c, 0xe9, 0x54, 0x64,
    0x0b, 0xc4, 0xd0, 0xf3, 0x67, 0x34, 0x74, 0x31, 0xc7, 0x30, 0x1a, 0x2e,
    0x54, 0x47, 0x13, 0x85, 0x82, 0x29, 0x9d, 0x6e, 0x58, 0x15, 0x3f, 0xc7,
    0x43, 0x92, 0xcf, 0x02, 0xdc, 0xa1, 0x36, 0xf5, 0x35, 0x67, 0x2d, 0xa0,
    0xd9, 0x4f, 0x4a, 0x03, 0xb6, 0x61, 0x81, 0x76, 0x12, 0xc4, 0x43, 0xc8,
    0xce, 0x47, 0x35, 0xce, 0xd1, 0xc7, 0xe0, 0xe2, 0x14, 0xd1, 0xdf, 0xce,
    0xcd, 0xd7, 0x52, 0x3c, 0xcc, 0x33, 0x26, 0x91, 0x1f, 0xfc, 0xd2, 0x3c,
    0xaf, 0x94, 0x19, 0x1c, 0xe1, 0xb8, 0xfb, 0xf1, 0xb8, 0xb5, 0x12, 0x19,
    0xc3, 0x24, 0xa9, 0xcc, 0x46, 0xd5, 0x03, 0x43, 0x69, 0x2a, 0xd7, 0x21,
    0xde, 0x0c, 0x47, 0x9f, 0x8d, 0x9e, 0x7a, 0xbd, 0x69, 0x84, 0xcc, 0xfa,
    0xf2, 0xea, 0xef, 0x0a, 0x07, 0xec, 0x7c, 0x15
};
unsigned int privkey_bin_len = 956;

int decrypt_buffer(
    const unsigned char* k,
    const unsigned char* iv,
    const unsigned char* inbuf,
    const int insize,
    unsigned char** outbuf,
    int& outsize
) {
    EVP_CIPHER_CTX* crypt_ctx = EVP_CIPHER_CTX_new();
    EVP_CIPHER_CTX_init(crypt_ctx);
    EVP_CIPHER_CTX_set_padding(crypt_ctx, 1); // enable padding

    if(EVP_DecryptInit_ex2(crypt_ctx, EVP_aes_128_cbc(), k, iv, NULL) != 1)
    {
        std::cerr << "Can't decrypt the buffer.\n";
        EVP_CIPHER_CTX_free(crypt_ctx);
        return -1;
    }

    outsize = insize + 128 - 1; //EVP_MAX_BLOCK_LENGTH;
    *outbuf = (unsigned char*)::malloc(outsize);
    memset(*outbuf, '\0', outsize);

    if(EVP_DecryptUpdate(crypt_ctx, *outbuf, &outsize, inbuf, insize) != 1)
    {
        std::cerr << "Can't decrypt the buffer..\n";
        EVP_CIPHER_CTX_free(crypt_ctx);
        free(*outbuf);
        return -1;
    }

    // Stick the final data at the end of the last decrypted data.
    int tmp_size = 0;
    if(EVP_DecryptFinal_ex(crypt_ctx, *outbuf + outsize, &tmp_size) != 1)
    {
        std::cerr << "Can't decrypt the buffer...\n";
        EVP_CIPHER_CTX_free(crypt_ctx);
        free(*outbuf);
        return -1;
    }
    outsize += tmp_size;

    EVP_CIPHER_CTX_free(crypt_ctx);
    return 0;
}

int main(int argc, char const *argv[])
{
    std::string sha1 = "1f9b5893090da313902be69c292939c7ce337b40";
    unsigned char bin_hash[20];
    for(int i = 0; i < 20; ++i) {
        char s[3]; s[2] = '\0';
        strncpy(s, (sha1.data() + i * 2), 2);
        bin_hash[i] = (unsigned char)strtoul(s, NULL, 16);
    }

 
    unsigned char k[16] = {
        0xa6, 0x19, 0x38, 0x59, 0xaf, 0x96, 0x5f, 0xa0,
        0x9d, 0xfb, 0x9, 0x21, 0, 0, 0, 0};
    
    const size_t iv_len = 16;
    unsigned char iv[iv_len]; // = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    memcpy(iv, bin_hash, iv_len);
    
    unsigned char* key_buf = NULL;
    int key_size = 0;
    int dec_result = decrypt_buffer(
        k,
        iv,
        privkey_bin,
        privkey_bin_len,
        &key_buf,
        key_size
    );
    std::cout << dec_result << std::endl;

    return 0;
}
